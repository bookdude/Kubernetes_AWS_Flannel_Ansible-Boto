- hosts: localhost
  vars:
    name_tag1: contrail-K8S-Master
    name_tag2: contrail-K8S-Minion
    region_tag: us-west-2
    availability_zone: us-west-2b
    cidr_block: 172.24.0.0/16
    subnet_cidr: 172.24.1.0/24
    ami: ami-efd0428f

  tasks:
  - name: Create a new VPC
    ec2_vpc:
      state: present
      cidr_block: 172.24.0.0/16
      resource_tags:
        Name: kube-vpc
      region: us-west-2
      internet_gateway: True
      subnets:
        - cidr: 172.24.1.0/24
          az: us-west-2b
      route_tables:
        - subnets:
            - 172.24.1.0/24
          routes:
            - dest: 0.0.0.0/0
              gw: igw
    register: vpc
    tags:
        - vpc

  - name: Create a new Subnet
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc_id }}"
      cidr: 172.24.1.0/24
      region: us-west-2
      resource_tags:
        Name: kube-subnet
    register: subnet
    tags:
        - subnet

  - name: get my public IP
    ipify_facts:

  - name: Create a new security group
    ec2_group:
      name: K8s security group
      description: It allows ports 22, 80,8080 and 443 in and 80 and 443 out
      vpc_id: "{{vpc.vpc_id}}"
      region: us-west-2
      rules:
        - proto: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: K8s security group
      rules_egress:
        - proto: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: K8s security group
    tags:
       - securitygroup

  - name: Create instances
    ec2:
      region: "{{ region_tag }}"
      key_name: kube-keypair
      instance_type: t2.xlarge
      image:  "{{ ami }}"
      wait: yes
      group: "K8s security group"
      count: 1
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      instance_tags:
        Name: "{{ name_tag1 }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 40
      assign_public_ip: yes
    register: ec2
    tags:
        - masterec2
  - name: Add new instances to launched group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ec2.instances}}"
  - name: Add new instance to master group
    add_host: hostname={{ ec2.instances.0.public_ip }} groupname=master
  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: '{{ec2.instances}}'

  - name: Create instances
    ec2:
      region: "{{ region_tag }}"
      key_name: kube-keypair
      instance_type: t2.xlarge
      image:  "{{ ami }}"
      wait: yes
      group: "K8s security group"
      count: 1
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      instance_tags:
        Name: "{{ name_tag2 }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 40
      assign_public_ip: yes
    register: ec2
    tags:
        - minionec2
  - name: Add new instances to launched group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ec2.instances}}"
  - name: Add new instance to minions group
    add_host: hostname={{ ec2.instances.0.public_ip }} groupname=minions
  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: '{{ec2.instances}}'


- hosts: launched
  remote_user: ubuntu
  become: true
  gather_facts: no
  pre_tasks:
    - name: install python2 because Ubuntu has python 3
      raw: sudo apt-get -y install python-simplejson

  tasks:

    - name: Executing Script to Enable Root Access to Instances
      script: ./utils/enable_root_access.sh
      tags: enableroot

    - name: Add k8s packages key
      apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg state=present
      tags: k8spackages

    - name: Add Kubernetes apt list
      copy: src=./files/kubernetes.list dest=/etc/apt/sources.list.d/kubernetes.list
      tags: aptlist

    - name: Update cache
      apt: update_cache=yes
      tags: cache

    - name: Upgrade
      apt: upgrade=dist
      tags: upgrade

    - name: install docker
      apt: name=docker.io state=present
      tags: installdocker

    - name: install kubelet
      apt: name=kubelet state=present
      tags: installkubelet

    - name: install kubectl
      apt: name=kubectl state=present
      tags: installkubectl

    - name: install kubeadm
      apt: name=kubeadm state=present
      tags: installkubeadm

    - name: install kubernetes-cni
      apt: name=kubernetes-cni state=present
      tags: installkubecni

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name: Set Hostname on Master
      script: ./utils/set_hostname_master.sh
      tags: hnamemaster

- hosts: minions
  remote_user: root
  become: true
  tasks:

    - name: Set Hostname on Node
      script: ./utils/set_hostname_node.sh
      tags: hnamenode

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name: Launch kubeadm in master
      shell: "kubeadm init --apiserver-advertise-address {{ ansible_eth0.ipv4.address }} --pod-network-cidr=10.244.0.0/16 --skip-preflight-checks |grep 'kubeadm join'"
      tags: initmaster
      register: output_kubeadm

    - set_fact:
        kubeadm_cmd: "{{output_kubeadm.stdout}}"
    - debug: msg="Output {{kubeadm_cmd}}"

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name: Transfer the script
      copy: src=./utils/set_auth_kubeconfig.sh dest=/home/ubuntu mode=0777
      tags: setadminconf

    - name: Execute the script
      command: bash /home/ubuntu/set_auth_kubeconfig.sh
      tags: setadminconf

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name:  Installing a pod network cluster role binding
      command: kubectl --kubeconfig /root/admin.conf create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml
      tags: rolebinding

    - name:  Installing a pod network
      command: kubectl --kubeconfig /root/admin.conf create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      tags: podnet

- hosts: minions
  remote_user: root
  become: true
  tasks:

    - set_fact:
        kubeadm: "{{hostvars[groups['master'][0]].kubeadm_cmd}}"
    - debug: msg="Output {{kubeadm}}"
    - name: Join to master
      command: "{{kubeadm}} --skip-preflight-checks"
      tags: initnode
      
- hosts: master
  remote_user: root
  become: true
  tasks:
  
    - name: Create Dashboard Pod
      script: ./utils/create_K8S_dashboard.sh
      tags: dashboard
